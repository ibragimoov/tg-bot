import { Telegraf, Markup, session } from "telegraf";
import { Scenes } from "telegraf";
import dotenv from 'dotenv';
import procces from 'process';
import Order from "./models/order.model.js";
import Product from "./models/products.model.js";
import Users from "./models/user.model.js";
import { buttons } from "./keyboard/buttons.js";
import { Action } from "./constants/actions.js";
import loginScene from './controllers/login.controller.js'
import orderScene from './controllers/order.controller.js';
import sendOrdersScene from './controllers/sendOrders.controller.js'
import moment from "moment";
import typeorm from "typeorm";

dotenv.config();

const connect = () => {
    const options = {
        name: "adelace",
        type: "mongodb",
        url: procces.env.DB_URL,
        useNewUrlParser: true,
        useFindAndModify: false,
        useUnifiedTopology: true,
        useCreateIndex: true,
        synchronize: true,
        logging: true,
        entities: [
            Order,
            Product,
            Users
        ],
    }

    return typeorm.createConnection(options)
  }

const bot = new Telegraf(procces.env.BOT_TOKEN);

const stage = new Scenes.Stage(
    [
        loginScene,
        orderScene,
        sendOrdersScene
    ]
);

bot.use(session());
bot.use(stage.middleware())

bot.start((ctx) => {
    try {
        if (ctx.chat.type == 'private') {
            ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.chat.first_name}`, 
            Markup.keyboard(buttons.SET_AUTH)
            .resize()
            );
        } else {
            ctx.reply(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –≥—Ä—É–ø–ø–µ - ${ctx.chat.id}`)
        }
    } catch (e) {
        console.log(e);
    }
});

bot.hears(Action.LOGIN, ctx => {
    ctx.scene.enter('loginScene')
})

bot.hears(Action.BACK, (ctx) => {
    ctx.scene.leave();
    ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.chat.first_name}`, 
        Markup.keyboard(buttons.SET_AUTH)
        .resize()
        );
})

bot.hears(Action.SEND_ORDER_FOR_SELLERS, ctx => {
    ctx.scene.enter('sendOrdersScene')
})

bot.hears(Action.MAKE_ORDER, ctx => {
    ctx.scene.enter('orderScene')
})

bot.hears(Action.FAQ, async (ctx) => {
    await ctx.replyWithPhoto({url: 'https://sun9-36.userapi.com/impg/u-4a-1vB1cOaiO0FtLJ3l1SvQjfLFYItSxmHiw/x6Joh4eHV4Y.jpg?size=609x471&quality=96&sign=e7553e7be1256d84f6b65a683d18f04f&type=album'});
    await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫\n–ï—Å–ª–∏ —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫–∏, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: help@mail.ru\n\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º\n\n');
})

bot.hears(Action.ORDERS, ctx => {
    ctx.reply('–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –∑–∞–∫–∞–∑—ã. . .',
    Markup.keyboard(buttons.ORDERS)
    .resize())
})

bot.hears(Action.MAIN_MENU, ctx => {
    ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    Markup.keyboard(buttons.MAIN_MENU)
    .resize())
})

bot.hears(Action.VIEW_ORDERS, async ctx => {
    const chatId = ctx.chat.id
    sendOrderByQuery(ctx, chatId)
})

bot.hears(Action.BUTTON_MAIN_MENU, ctx => {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–∂–∏—â–µ', 
    Markup.keyboard(buttons.MAIN_MENU)
    .resize());
    return ctx.scene.leave()
})

bot.hears(/c/, async ctx => {
    let orderId = ctx.message.text;
    orderId = orderId.substring(2, 5);
    const productRep = typeorm.getMongoRepository(Product, 'adelace')
    if (ctx.chat.id > 0) {
        sendProductByQuery(ctx, orderId)
    }

    if (ctx.chat.id < 0) {
        let html;
        productRep.find({orderId: Number(orderId)}).then(async product => {
            let count = 0,
            user_id;
            html = product.map ((f, i) => {
                count++;
                user_id = f.chatId
                return `=========================\n üì¶–¢–æ–≤–∞—Ä: ${f.nameProduct}\n ‚öñÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${f.value}`;
            }).join('\n');

            html += `\n=========================\n\nID –∫–ª–∏–µ–Ω—Ç–∞: -${user_id}\nID –∑–∞–∫–∞–∑–∞: +${orderId}`

            return await ctx.telegram.sendMessage('-1001756421815', html,
            Markup.inlineKeyboard(
                [
                    [
                        {text: '‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å', callback_data: '‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å'}, {text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'}
                    ],
                    [
                        {text: 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', callback_data: 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'}
                    ]
                ]
            ))
        });
    }
})

bot.hears(/d/, async ctx => {
    let orderId = ctx.message.text;
    orderId = orderId.substring(2, 5);
    const orderRep = typeorm.getMongoRepository(Order, 'adelace')

    ctx.reply(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId}`, 
    Markup.inlineKeyboard(
        [
            [
                {text: '–î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: '–î–∞, —É–¥–∞–ª–∏—Ç—å'}, {text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: '–û—Ç–º–µ–Ω–∏—Ç—å'}
            ]
        ]
    ))
})

function sendOrderByQuery(ctx, chatId) {
    let html;
    const orderRep = typeorm.getMongoRepository(Order, 'adelace')

    orderRep.count({chatId: ctx.from.id}, (err, count) => {
        if (count == 0) {
            ctx.reply('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
        }
        else {
            orderRep.find({ where: { chatId: chatId} }).then(async orders => {
                let count = 0;
                html = orders.map ((f, i) => {
                    count++;
                    return `=============================\n <b>–ó–∞–∫–∞–∑ #${i + 1}</b>\n <b>‚úÖ–°—Ç–∞—Ç—É—Å:</b> ${f.status}\n <b>üìÖ–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${moment(f.updatedAt).format('DD.MM.YYYY, HH:mm')}\n <b>üîé–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> /c${f.orderId}\n\n <b>‚ùé–£–¥–∞–ª–∏—Ç—å: /d${f.orderId}</b>`;
                }).join('\n');
        
                html += `\n=============================\n\n<b><i>üìÆ–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</i></b> ${count}`
                await ctx.replyWithHTML(html)
            }).catch((e) => {
                console.log(e)
            });
        }
    })
}

function sendProductByQuery(ctx, orderId) {
    let html;
    const productRep = typeorm.getMongoRepository(Product, "adelace")
    productRep.find({where: {orderId: Number(orderId)}}).then(async product => {
        let count = 0;
        html = product.map ((f, i) => {
            count++;
            return `===================\n <b>üì¶–¢–æ–≤–∞—Ä:</b> ${f.nameProduct}\n <b>‚öñÔ∏è–ö–æ–ª-–≤–æ:</b> ${f.value}`;
        }).join('\n');

        html += `\n===================\n\n<b><i>üß∫–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</i></b> ${count}`
        await ctx.replyWithHTML(html)
    });
}

bot.action('‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å', ctx => {
    const orderRep = typeorm.getMongoRepository(Order, "adelace")
    const msg = ctx.callbackQuery.message.text
    let user_id = msg.substring(msg.indexOf('-') + 1)
    let order_id = msg.substring(msg.indexOf('+') + 1)
    
    if (ctx.from.id == 258752149) {
        ctx.answerCbQuery('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç')
        ctx.telegram.sendMessage(user_id, '–¢–æ—Ä–≥–æ–≤–µ—Ü –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑\n–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤. . .')

        orderRep.updateMany({orderId: Number(order_id)},
            {
                $set: {
                    status: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                    updatedAt: new Date()
                }
            })
        
        ctx.pinChatMessage(ctx.callbackQuery.message.message_id)

    } else {
        ctx.answerCbQuery('–¢—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤–µ—Ü', ctx.from.id)
        ctx.reply(`${ctx.from.first_name}, –¢—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤–µ—Ü`)
    }
})

bot.action('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', ctx => {
    const msg = ctx.callbackQuery.message.text
    const user_id = msg.substring(msg.indexOf('-') + 1)

    if (ctx.from.id == 258752149) {
        ctx.answerCbQuery('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')
        ctx.telegram.sendMessage(user_id, '–¢–æ—Ä–≥–æ–≤–µ—Ü –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑')
    } else {
        ctx.answerCbQuery('–¢—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤–µ—Ü', ctx.from.id)
        ctx.reply(`${ctx.from.first_name}, –¢—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤–µ—Ü`)
    }
})

bot.action('üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', ctx => {
    const orderRep = typeorm.getMongoRepository(Order, "adelace")
    const msg = ctx.callbackQuery.message.text
    let user_id = msg.substring(msg.indexOf('-') + 1)
    let order_id = msg.substring(msg.indexOf('+') + 1)
    
    if (ctx.from.id == 258752149) {
        ctx.answerCbQuery('–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ')
        ctx.telegram.sendMessage(user_id, '–¢–æ—Ä–≥–æ–≤–µ—Ü –≥–æ—Ç–æ–≤ –≤—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä\n–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤. . .')

        orderRep.updateMany({orderId: Number(order_id)},
            {
                $set: {
                    status: '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
                    updatedAt: new Date()
                }
            })

    } else {
        ctx.answerCbQuery('–¢—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤–µ—Ü', ctx.from.id)
        ctx.reply(`${ctx.from.first_name}, –¢—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤–µ—Ü`)
    }
})

bot.action('–î–∞, —É–¥–∞–ª–∏—Ç—å', ctx => {
    const msg = ctx.callbackQuery.message.text
    const orderRep = typeorm.getMongoRepository(Order, 'adelace')
    let orderId = msg.substring(msg.indexOf('‚Ññ') + 1)
    orderRep.findOneAndDelete({orderId: Number(orderId)})
    ctx.reply('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
})

bot.action('–û—Ç–º–µ–Ω–∏—Ç—å', ctx => {
    ctx.reply('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')
})

bot.help((ctx) => ctx.reply('Send me a sticker'));
bot.on('sticker', (ctx) => ctx.reply('üëç'));
bot.hears('hi', (ctx) => {
    ctx.reply(`${ctx.message.text}`)
});

connect()
  .then(() => {
    bot.use(stage.middleware())
    bot.launch();
    console.log('Connected to database')
  })
  .catch((error) => console.log('Connect failed, error:', error))