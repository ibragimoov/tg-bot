import { Scenes, Markup } from 'telegraf';
import moment from 'moment';
import typeorm from 'typeorm'
import Users from '../models/user.model.js';
import Order from '../models/order.model.js';

const sendOrdersScene = new Scenes.WizardScene('sendOrdersScene',
    async (ctx) => {
        const userRep = typeorm.getMongoRepository(Users, "adelace")
        const orderRep = typeorm.getMongoRepository(Order, "adelace")
        const user = await userRep.findOne({chatId: ctx.from.id})
        let html,
            text = `\n=========================\n\n–ó–∞–∫–∞–∑—á–∏–∫:   ${user.name}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: -${ctx.chat.id}\n`

        orderRep.find({chatId: ctx.from.id, status: '–ù–æ–≤—ã–π'}).then(async orders => {
            let count = 0;
            html = orders.map ((f, i) => {
                count++;
                return `=========================\n –ó–∞–∫–∞–∑ #${i + 1}\n ‚úÖ–°—Ç–∞—Ç—É—Å: ${f.status}\n üìÖ–û–±–Ω–æ–≤–ª–µ–Ω: ${moment(f.updatedAt).format('DD.MM.YYYY')}\n üîé–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /c${f.orderId}`;
            }).join('\n');

            html += text
            await ctx.telegram.sendMessage('-1001756421815', html,
            // Markup.inlineKeyboard(
            //     [
            //         [
            //             {text: '‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å', callback_data: '‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å'}, {text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'}
            //         ],
            //         [
            //             {text: 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', callback_data: 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'}
            //         ]
            //     ]
            // )
            )
        });
    
        return await ctx.scene.leave();
    })

export default sendOrdersScene;